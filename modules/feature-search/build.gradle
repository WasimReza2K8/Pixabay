plugins {
    id 'com.android.library'
    id 'kotlinx-serialization'
    id("com.google.devtools.ksp") version "${kspVersion}"
}
apply from: "$rootDir/buildsystem/common-dependencies.gradle"
apply from: "$rootDir/buildsystem/compose-dependencies.gradle"


android {

    packagingOptions {
        resources {
            pickFirsts += ['META-INF/LICENSE.md', 'META-INF/licenses/ASM', 'META-INF/INDEX.LIST', 'META-INF/LICENSE-notice.md']
        }
    }
    resourcePrefix 'search_'
    namespace 'com.jet.feature.search'
    defaultConfig {
        consumerProguardFiles "$projectDir/proguard-search-consumer-rules.pro"
    }

    buildTypes {
        debug {
            buildConfigField "long", "DEBOUNCE_TIME", "350L"
        }
        release {
            buildConfigField "long", "DEBOUNCE_TIME", "350L"
        }
        UITest {
            buildConfigField "long", "DEBOUNCE_TIME", "0L"
        }
    }

}

dependencies {
    implementation project(':core')
    implementation project(':core-ui')
    implementation project(':core-navigation')
    implementation project(':modules:feature-search-shared')
    implementation project(':modules:feature-detail-shared')

    implementation libs.kotlinx.serialization
    implementation libs.com.squareup.retrofit
    implementation libs.bundles.coroutines
    implementation libs.androidx.room.runtime
    ksp libs.androidx.room.compiler
    implementation libs.androidx.room.ktx
    androidTestImplementation libs.androidx.room.testing
    androidTestImplementation libs.androidx.test.ext.junit
    androidTestImplementation libs.org.jetbrains.kotlinx.coroutines.test
    androidTestImplementation libs.androidx.test.rules
    androidTestImplementation libs.androidx.test.runner
    androidTestImplementation libs.androidx.test.ext.junit.ktx
    androidTestImplementation libs.org.assertj.core
}

gradle.taskGraph.whenReady { taskGraph ->
    def tasks = taskGraph.getAllTasks()
    if (tasks.find {it.name.startsWith("test")}) {
        tasks.findAll {it.name.contains("testUITestUnitTest")}.each { task ->
            task.enabled = false
        }
    }
}
