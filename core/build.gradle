plugins {
    id 'com.android.library'
    id 'kotlinx-serialization'
}
apply from: "$rootDir/buildsystem/common-dependencies.gradle"

android {

    packagingOptions {
        resources {
            pickFirsts += ['META-INF/LICENSE.md', 'META-INF/licenses/ASM', 'META-INF/INDEX.LIST', 'META-INF/LICENSE-notice.md']
        }
    }
    namespace 'com.example.core'
    buildTypes {
        Properties properties = new Properties()
        if (file("../local.properties").exists()) {
            properties.load(project.rootProject.file("local.properties").newDataInputStream())
        }
        release {
            buildConfigField("String", "API_KEY", System.getenv("API_KEY") ?: "\"${properties.getProperty("API_KEY")}\"")
            buildConfigField "String", "BASE_URL", "\"https://pixabay.com/\""
        }
        debug {
            buildConfigField("String", "API_KEY", System.getenv("API_KEY") ?: "\"${properties.getProperty("API_KEY")}\"")
            buildConfigField "String", "BASE_URL", "\"https://pixabay.com/\""
        }
        UITest {
            buildConfigField("String", "API_KEY", System.getenv("API_KEY") ?: "\"${properties.getProperty("API_KEY")}\"")
            buildConfigField "String", "BASE_URL", "\"https://pixabay.com/\""
        }
    }
}

dependencies {
    implementation libs.androidx.appcompat
    implementation libs.androidx.navigation.fragment.ktx
    implementation libs.androidx.navigation.ui.ktx

    implementation libs.com.google.android.material
    implementation libs.bundles.coroutines
    implementation libs.kotlinx.serialization
    implementation libs.retrofit.kotlinx.serialization.converter
    implementation libs.com.squareup.retrofit
    implementation libs.com.squareup.okhttp3.okhttp
    implementation libs.com.squareup.okhttp3.logging.interceptor
    implementation libs.glide
    annotationProcessor libs.glide.compiler
    // devtool
    debugImplementation libs.chucker
    releaseImplementation libs.chucker.no.op
}